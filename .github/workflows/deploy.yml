# This GitHub Actions workflow automates the deployment of a SvelteKit app (using a static adapter)
# to GitHub Pages. It includes:
# - Automatic deployment for `main` and `dev` branches
# - Preview deployments for pull requests
# - Toggle-able commit-based previews
# - Workflow dispatch to manually trigger deployments with custom inputs
# - Caching of dependencies to speed up builds

name: Deploy SvelteKit to GitHub Pages

on:
  push:
    # This section triggers the workflow when code is pushed to specific branches.
    branches:
      - main  # Deploy when pushing to the main branch (for production/demo)
    #  - dev   # Deploy when pushing to the development branch
    # Uncomment the section below to enable commit previews for all branches
    #  - '**' # Enable commit previews for all branches

  workflow_dispatch:
    # Enables manual triggering of this workflow with user-defined inputs.
    # Useful for deploying specific branches or enabling/disabling commit previews dynamically.
    inputs:
      deploy_branch:
        description: "Branch to deploy"
        required: false
        default: "main"
        type: string

# Permissions required for GitHub Actions to interact with GitHub Pages
permissions:
  contents: read  # Read repository contents
  pages: write  # Write to GitHub Pages
  id-token: write  # Required for authentication

jobs:
  deploy:
    env: # Add the github env secret as an env variable
      VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}
      VITE_STATIC_DATA_VERSION: ${{ vars.VITE_STATIC_DATA_VERSION }}
      VITE_STATIC_DATA_SOURCE: ${{ vars.VITE_STATIC_DATA_SOURCE }}
      VITE_LIVE_DATA_SOURCE: ${{ vars.VITE_LIVE_DATA_SOURCE }}
      TEST_KEY: ${{ secrets.TEST_KEY }}
    runs-on: ubuntu-latest  # Specifies the operating system for the runner

    steps:
      - name: Checkout repository
        # Checks out the repository so the workflow has access to the code
        uses: actions/checkout@v4


      - name: Retrieve Yarn Cache Path
        id: yarn-cache-dir-path
        # Save the cache path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Yarn Cache Packages
        uses: actions/cache@v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies (Yarn)
        # Installs project dependencies using Yarn, ensuring they match `yarn.lock`
        run: yarn install --frozen-lockfile

      - name: Build SvelteKit app
        # Builds the static site using SvelteKit
        # Determines the BASE_PATH dynamically based on the branch name
        run: |
          echo "$TEST_KEY"
          export BASE_PATH="${{ github.ref_name == 'main' && '' || format('/{0}', github.ref_name) }}"
          yarn build

      - name: Deploy to GitHub Pages
        # Uploads the built site as an artifact for GitHub Pages deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: build  # Path to the build output directory

  publish:
    needs: deploy  # Ensures deployment completes before publishing
    runs-on: ubuntu-latest

    # Deployment condition:
    # - Deploy when pushing to `main`
    # - Allow manual deployment of a selected branch via workflow dispatch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_branch != '')

    steps:
      - name: Deploy to GitHub Pages
        # Publishes the site to GitHub Pages
        uses: actions/deploy-pages@v4
